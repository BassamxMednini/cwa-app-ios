// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: diagnosis_key_batch.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Data type representing why this key was published.
enum SAP_ReportType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Never returned by the client API.
  case unknown // = 0
  case confirmedTest // = 1
  case confirmedClinicalDiagnosis // = 2
  case selfReport // = 3

  /// Reserved for future use.
  case recursive // = 4

  /// Used to revoke a key, never returned by client API.
  case revoked // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .confirmedTest
    case 2: self = .confirmedClinicalDiagnosis
    case 3: self = .selfReport
    case 4: self = .recursive
    case 5: self = .revoked
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .confirmedTest: return 1
    case .confirmedClinicalDiagnosis: return 2
    case .selfReport: return 3
    case .recursive: return 4
    case .revoked: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension SAP_ReportType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [SAP_ReportType] = [
    .unknown,
    .confirmedTest,
    .confirmedClinicalDiagnosis,
    .selfReport,
    .recursive,
    .revoked,
  ]
}

#endif  // swift(>=4.2)

struct SAP_DiagnosisKeyBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keys: [SAP_DiagnosisKey] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct SAP_DiagnosisKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// key
  var keyData: Data = SwiftProtobuf.Internal.emptyData

  var rollingStartIntervalNumber: UInt32 = 0

  /// number of 10-minute windows between key-rolling
  var rollingPeriod: UInt32 = 0

  /// risk of transmission
  var transmissionRiskLevel: Int32 = 0

  var visitedCountries: [String] = []

  /// country of origin
  var origin: String = String()

  /// set by backend
  var reportType: SAP_ReportType = .unknown

  /// Number of days elapsed between symptom onset and the TEK being used.
  /// E.g. 2 means TEK is 2 days after onset of symptoms.
  var daysSinceOnsetOfSymptoms: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "SAP"

extension SAP_ReportType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "CONFIRMED_TEST"),
    2: .same(proto: "CONFIRMED_CLINICAL_DIAGNOSIS"),
    3: .same(proto: "SELF_REPORT"),
    4: .same(proto: "RECURSIVE"),
    5: .same(proto: "REVOKED"),
  ]
}

extension SAP_DiagnosisKeyBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DiagnosisKeyBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keys"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.keys)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keys, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_DiagnosisKeyBatch, rhs: SAP_DiagnosisKeyBatch) -> Bool {
    if lhs.keys != rhs.keys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SAP_DiagnosisKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DiagnosisKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyData"),
    2: .same(proto: "rollingStartIntervalNumber"),
    3: .same(proto: "rollingPeriod"),
    4: .same(proto: "transmissionRiskLevel"),
    5: .same(proto: "visitedCountries"),
    6: .same(proto: "origin"),
    7: .same(proto: "reportType"),
    8: .standard(proto: "days_since_onset_of_symptoms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.keyData)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.rollingStartIntervalNumber)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.rollingPeriod)
      case 4: try decoder.decodeSingularInt32Field(value: &self.transmissionRiskLevel)
      case 5: try decoder.decodeRepeatedStringField(value: &self.visitedCountries)
      case 6: try decoder.decodeSingularStringField(value: &self.origin)
      case 7: try decoder.decodeSingularEnumField(value: &self.reportType)
      case 8: try decoder.decodeSingularUInt32Field(value: &self.daysSinceOnsetOfSymptoms)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyData.isEmpty {
      try visitor.visitSingularBytesField(value: self.keyData, fieldNumber: 1)
    }
    if self.rollingStartIntervalNumber != 0 {
      try visitor.visitSingularUInt32Field(value: self.rollingStartIntervalNumber, fieldNumber: 2)
    }
    if self.rollingPeriod != 0 {
      try visitor.visitSingularUInt32Field(value: self.rollingPeriod, fieldNumber: 3)
    }
    if self.transmissionRiskLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.transmissionRiskLevel, fieldNumber: 4)
    }
    if !self.visitedCountries.isEmpty {
      try visitor.visitRepeatedStringField(value: self.visitedCountries, fieldNumber: 5)
    }
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 6)
    }
    if self.reportType != .unknown {
      try visitor.visitSingularEnumField(value: self.reportType, fieldNumber: 7)
    }
    if self.daysSinceOnsetOfSymptoms != 0 {
      try visitor.visitSingularUInt32Field(value: self.daysSinceOnsetOfSymptoms, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SAP_DiagnosisKey, rhs: SAP_DiagnosisKey) -> Bool {
    if lhs.keyData != rhs.keyData {return false}
    if lhs.rollingStartIntervalNumber != rhs.rollingStartIntervalNumber {return false}
    if lhs.rollingPeriod != rhs.rollingPeriod {return false}
    if lhs.transmissionRiskLevel != rhs.transmissionRiskLevel {return false}
    if lhs.visitedCountries != rhs.visitedCountries {return false}
    if lhs.origin != rhs.origin {return false}
    if lhs.reportType != rhs.reportType {return false}
    if lhs.daysSinceOnsetOfSymptoms != rhs.daysSinceOnsetOfSymptoms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
